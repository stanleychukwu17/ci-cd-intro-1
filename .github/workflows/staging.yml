name: Create staging environment for push request to main site

on:
  workflow_dispatch:
    inputs:
      PR_number:
        description: 'Pull Request Number'
        required: true

jobs:
  create_staging:
    name: Create Staging environment
    environment: staging
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # ======================================================
      # It's important to check that the PR number provided as input is valid and belongs to the repository.
      # 
      # This will also return the PR's branch as an output which can be fetched in next steps via:
      # ${{ steps.verify_pr_number.outputs.result }}
      # ======================================================
      - name: Verify Pull Request Number
        uses: actions/github-script@v7
        id: verify_pr_number
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const response = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.PR_number }}
            });

            // Check if the pull request number is valid
            if (response.data.number !== ${{ github.event.inputs.PR_number }}) {
              throw new Error('Pull request number is not valid!');
            } else {
              console.log("PR ref: " + response.data.head.ref);
              return response.data.head.ref;
            }

      # ======================================================
      # Checkout the repo and build the cocker image
      # ======================================================
      - name: Checkout Repo
        uses: actions/checkout@v4

      # login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3  
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Docker image tag
        run: echo "BACKEND_DOCKER_IMG=stanleychukwu17/github-actions-demo-node-app:${{ github.event.inputs.PR_number }}" >> $GITHUB_ENV

      - name: Build Docker image
        working-directory: web/
        run: docker build -t stanleychukwu17/github-actions-demo-node-app:${{ github.event.inputs.PR_number }} .

      - name: Push Docker image to Docker Hub
        working-directory: web/
        run: docker push stanleychukwu17/github-actions-demo-node-app:${{ github.event.inputs.PR_number }}

      - name: exit the workflow, let me see if the steps above are working
        run: exit 0

      # ======================================================
      # Terraform setup
      # - secrets.TERRAFORM_API_TOKEN: is the Terraform  API Token.
      # ======================================================
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.2
          cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}


      # ======================================================
      # We need to create a new Terraform resource file and for this we can use the `create_staging_resource.sh` and pass the PR number as an argument.
      # 
      # The script returns a JSON string of the format: 
      # {
      #   "resource_file": "extra_staging_'${resource_id}'.tf", 
      #   "terraform_expected_output": "staging_dns_'${resource_id}'"
      # }
      #
      # We use jq to pull out the value of `terraform_expected_output` as we will need it later to fetch the hostname of the staging server
      # ======================================================
      - name: 'Create staging environment resource file'
        id: create_resource_file
        working-directory: infra/staging/
        run: |
          OUTPUT="$(./create_staging_resource.sh PR_${{ github.event.inputs.PR_number }} | jq -r .terraform_expected_output)"
          echo "STAGING_RESOURCE_NAME=$OUTPUT" >> $GITHUB_ENV
        
      - name: Create terraform.auto.tfvars file with all the necessary variables
        id: create_tfvars
        working-directory: infra/staging/
        run: |
          echo "aws_access_key = \"${{ secrets.AWS_ACCESS_KEY }}\"" >> terraform.auto.tfvars
          echo "aws_secret_key = \"${{ secrets.AWS_SECRET_KEY }}\"" >> terraform.auto.tfvars
          echo "public_key = \"${{ secrets.PUBLIC_KEY }}\"" >> terraform.auto.tfvars

      - name: Terraform Init and Validate
        id: init
        working-directory: infra/staging/
        run: |
          terraform init
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: infra/staging/
        continue-on-error: true

      # ======================================================
      # Once Terraform Plan is completed we need to update
      # the PR with the results of the plan
      # 
      # Pull requests are treated as issues in GitHub's API
      # so we use the `github.rest.issues.createComment` action
      # to add a comment to the PR.
      #
      # Ensure that the GITHUB_TOKEN has write permissions for issues and pull requests.
      # You can adjust this in the "repository settings" under Actions > General > Workflow permissions.
      # ======================================================
      - name: Update Pull Request
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

              <details>
                <summary>Show Plan</summary>

                \`\`\`\n
                  ${process.env.PLAN}
                \`\`\`
              </details>

              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
            `;

            # 
            github.rest.issues.createComment({
              issue_number: ${{ github.event.inputs.PR_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: infra/staging/
        run: |
          terraform apply -no-color -auto-approve


      # ======================================================
      # If everything goes well and the Terraform plan and apply was
      # executed successfully, and the resources were created
      # we need to commit the new resource file and push it
      # 
      # If we don't do this, every time this workflow runs
      # it will destroy the resources created by previous
      # runs. We need to persist the state in the repository
      # for this to work.
      # 
      # Here we use a neat little trick:
      # git commit -m "Add terraform resource files" && \
      #      git push || echo "Nothing to commit"
      #
      # git push will fail with a non-zero exit if there 
      # are no changes to commit and this will cause the workflow
      # to fail. We don't want that. We can use the `|| echo`
      # to print "Nothing to commit" to the console if 
      # git push fails.
      # --FINALLY--
      # no need to commit the files generated during this workflow since all the
      # resources created are stored in our .tfstate in the terraform backend cloud,
      # so when we run "terraform destroy", it will destroy the resources
      # that is why i commented out the steps below
      # ======================================================
      #- name: Commit terraform resource files to the PR
      #  working-directory: infra/staging/
      #  run: |
      #    echo "actor: ${{ github.actor }}"
      #    echo "url: https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"

      #    # check if there are any new files
      #    git status --porcelain | grep -q . && echo "NEW_FILES=true" >> $GITHUB_ENV || echo "NEW_FILES=false" >> $GITHUB_ENV

      #    git config --global user.name '${{ github.actor }}'
      #    git config --global user.email '${{ github.actor}}@users.noreply.github.com'
      #    git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      #    git switch -c workflow-branch
      #    git add ./\*.tf

      #    git commit -m "Add terraform resource files" && \
      #    git push origin workflow-branch || echo "Nothing to commit"

      ## env.NEW_FILES is created from the previous step
      #- name: Create Pull Request
      #  uses: peter-evans/create-pull-request@v7
      #  if: ${{ env.NEW_FILES == 'true' }}
      #  with:
      #    token: ${{ secrets.GITHUB_TOKEN }}
      #    base: main
      #    branch: workflow-branch
      #    title: "Update generated files"
      #    body: "This PR updates the generated files."


      # =====================================================
      # now clean up the terraform.auto.tfvars file
      # =====================================================
      - name: Clean up terraform.auto.tfvars file
        id: cleanup
        working-directory: infra/staging/
        run: |
          rm terraform.auto.tfvars
          echo "Removed terraform.auto.tfvars file to prevent sensitive data leakage."
