server {
    listen 80;
    server_name example.com; # replace example.com with ec2_dns name

    # Redirect HTTP to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name example.com; # replace example.com with ec2_dns name

    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    # Other SSL settings (like ciphers, etc.)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:...';
    ssl_prefer_server_ciphers on;

    location / {
        # Forward requests to the Node.js container on port 4000
        proxy_pass http://node_app:4000; # where "node_app" is the name of the container

        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support (if applicable) - handling persistent connections
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';


        # Cache-busting for WebSocket (if needed)
        # this is included to ensure that Nginx does not cache WebSocket connections,
        # which is typically important in real-time applications.
        proxy_cache_bypass $http_upgrade;

        # Handling Connection Timeouts
        # Adding timeouts ensures that Nginx doesn't hang indefinitely when there
        # are connection issues with the backend.
        proxy_read_timeout 90s;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;

        # Buffer Settings
        # Adjusting buffer settings can help manage large response bodies (for instance,
        # if your app sends large files) and avoid memory issues on the Nginx side.
        proxy_buffers 16 4k;
        proxy_buffer_size 2k;
    }

    # Rate Limiting
    # To protect the application from DoS (Denial of Service) attacks
    # this is a basic rate limiting.
    limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;
    limit_req zone=one burst=10;

    # Security Enhancements: Limiting Methods
    # Restricting HTTP methods to only the ones needed for the app
    # (usually GET and POST) can improve security by preventing unwanted requests.
    limit_except GET POST {
        deny all;
    }

    # Security Headers to prevent attacks
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self';" always;

    # Gzip Compression
    # Enabling gzip compression for response bodies can reduce the bandwidth usage
    # and improve load times for users. This is especially helpful if the app serves
    # a lot of text-based content like HTML, CSS, and JavaScript.
    gzip on;
    gzip_types text/plain application/javascript text/css application/json application/xml;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_vary on;

    # Logging
    # Enabling and customizing logging can be crucial for debugging and monitoring.
    # Ensure you have access logs enabled for tracking incoming traffic.
    access_log /var/log/nginx/access.log combined; # logs to monitor requests
    error_log /var/log/nginx/error.log warn; # Error logs to track issues


    # Preventing IP Spoofing
    # If you're running Nginx behind a reverse proxy
    # (like a load balancer or in a Docker container),
    # ensure the real client IP is passed correctly to your application. If you're using
    # Docker or similar setups, you'll need to ensure that X-Real-IP or X-Forwarded-For
    # is passed properly by your load balancer or reverse proxy.
    #
    # If you're using a trusted proxy (e.g., AWS ELB, Cloudflare), you may want to
    # trust those headers
    # --- personal note from me---
    # i don't really understand this one here, so i'd like to take sometime
    # to learn more about it, then you can uncomment the code below
    # --- end of note ---
    # Trust specific proxy headers (important if running behind a load balancer or reverse proxy)
    # set_real_ip_from <your-trusted-proxy-ip>;  # IP of the trusted proxy (e.g., load balancer)
    # real_ip_header X-Forwarded-For;
}